import pandas as pd
import numpy as np
import math
import matplotlib.pyplot as plt
%matplotlib inline

from matplotlib.pylab import rcParams
rcParams['figure.figsize']=20,10
from keras.models import Sequential
from keras.layers import LSTM,Dropout,Dense
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_percentage_error
from sklearn.metrics import r2_score
from sklearn.metrics import mean_absolute_error 
from sklearn.metrics import accuracy_score 
from sklearn.metrics import mean_squared_error

\n
import os
\n
os.getcwd()
\n
os.chdir('C:\\Users\\DELL\\Downloads')  #save the CSV file in downloads
\n
df=pd.read_csv("stock_prices.csv")
df
\n
df.isnull().sum()
\n
plt.figure(figsize=(36,8)) 
plt.subplot(1,2,2);
plt.plot(df[df.symbol =='AAPL'].volume.values, color='black', label='volume') 
plt.title('stock volume')
plt.xlabel('time [days]')
plt.ylabel('volume')
plt.legend(loc='best');
\n
fig, axes = plt.subplots()

df[df.symbol =='AAPL']['close'].plot( legend=True, linestyle='--',marker='o')
\n
df = df. loc[(df['symbol'] == 'AAPL')] 
df = df.drop(columns=['symbol'])

df = df[['date', 'open', 'close', 'low', 'high', 'volume']]

df
\n
df.shape
\n
df.describe()
\n
df.hist()
\n
plt.figure(figsize=(36,8))

plt.subplot(1,2,1);
plt.title('stock closing price')

plt.plot(df['close'])

plt.xlabel('time[days]' , fontsize=20)

plt.ylabel('Closing Price Historically ($)', fontsize=20)

plt.show()

\n
 df = df.filter(['close'])
dataset = df. values
training_data_len = math.ceil(len(dataset)* 0.8)
training_data_len
\n
df.head()
\n
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range=(0,1)) 
scaled_data = scaler. fit_transform(dataset)
scaled_data
\n
train_data = scaled_data[0:training_data_len, :]
x_train = []
y_train = []

for j in range(60, len(train_data)):
    x_train.append(train_data[j-60:j,0]) 
    y_train.append(train_data[j,0])
    if j<=60:
        print(x_train)
        print(y_train)
        print()
\n
x_train, y_train = np.array(x_train), np.array(y_train)
\n
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))
x_train.shape
\n
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape = (x_train.shape[1], 1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25)) 
model.add(Dense(1))
model.compile(optimizer='adam', loss='mean_squared_error')
print(model.summary())
\n
LSTM=model.fit(x_train, y_train, batch_size=32, epochs=10)
\n
%matplotlib inline
losses = pd.DataFrame(LSTM.history)
losses.plot()
\n
#testing data for the model

test_data = scaled_data[training_data_len - 60: , :]

x_test = [] 
y_test = dataset[training_data_len:, :]

for j in range(60, len(test_data)):
    x_test.append(test_data[j - 60:j, 0])

\n
x_test = np.array(x_test)
\n
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))
\n
len(test_data)
\n
train = df[:training_data_len]
val = df[training_data_len:] 
val['Predictions'] = predictions

plt.figure(figsize=(16,8))
plt.title('LSTM Model Data')
plt.xlabel('Time', fontsize=16)
plt.ylabel('Close Price', fontsize=16)
plt.plot(train['close'])
plt.plot(val[['close', 'Predictions']])
plt.legend(['Trained Dataset', 'Actual value', 'Predictions'])
plt.show()
\n
plt.figure(figsize=(16,8))
plt.xlabel('Time[Date]', fontsize=16)
plt.ylabel('Close Price', fontsize=16)
plt.plot(val['close'], color = 'orange', label = 'closing price')
plt.plot(val[ 'Predictions'], color = 'green', label='Predicted Price')
plt.legend()
plt.show()
\n
val
\n
new_data = pd.read_csv('stock_prices.csv') 
new_data= df.filter(['close'])
last_60_days=new_data[-60:].values 
last_60_days
last_60_scaled = scaler.transform(last_60_days)
X_test = []
X_test.append(last_60_scaled)
X_test = np.array(X_test)
temp_input=list(X_test) 
temp_input = temp_input[0].tolist()

predicted_price = model.predict(X_test)

predicted_price = scaler.inverse_transform(predicted_price)

print("The predicted price of the final value of the dataset", predicted_price)
\n


new_data.tail(1)
\n
print("Test ruse:",np.sqrt(np.mean(((predictions- y_test)**2))))

print("mse:", np.mean((predictions-y_test)**2))

print('R2 Score:', r2_score(predictions, y_test))

print("MAPE:",mean_absolute_percentage_error(predictions, y_test))
mape=mean_absolute_percentage_error(predictions,y_test)
print("MAE:", mean_absolute_error(predictions, y_test)) 
\n
x = val.close.mean()

y = val.Predictions.mean()

Accuracy = x/y*100

print("The accuracy of the model is " , round(Accuracy,2),"%")










end:)